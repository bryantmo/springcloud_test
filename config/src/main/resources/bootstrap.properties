###################################  配置中心  ######################################################
# 在第2章中，我们详细说明了SpringBoot 对配置文件的加载顺序，
# 对于本应用jar 包之外的配置文件加载会优先于应用jar 包内的配 置内容，
# 而通过bootstrap.properties 对config-server 的配置，
# 使得该应用会从config-server 中获取一些外部配置信息，这些信息的优先级比本地的内容要高，从而实现了外部化配置。

server.port=8851
spring.application.name=config-server
spring.config.name=config-server

# 使用git管理配置内容的分布式配置中心
spring.cloud.config.server.git.uri=https://gitee.com/mmbscau/didispace_springcloudLearning
spring.cloud.config.server.git.searchPaths:didispace/config-repo
spring.cloud.config.server.git.username:mmbscau
spring.cloud.config.server.git.password:123456abc

## 采用本地文件系统
#spring.profiles.active=native
#spring.cloud.config.server.native.searchLocations=classpath:/config/

## config属性覆盖：这个属性配置的参数，不会被springcloud客户端修改！！并且客户端可以获取得到
## 作用：方便的给springCloud应用提供一些共同属性或默认属性
spring.cloud.config.server.overrides.user.config.task.enable=true

## config服务端：安全保护，配置密码（明文版本）
#spring.security.user.name=user
#spring.security.user.password=88888888
## config服务端：安全保护，配置密码（对称加密的密文版本，88888888的加密结果）
spring.security.user.name=user
spring.security.user.password={cipher}0b87e67a0ed81282350e979b65c090608fd2b9fcf7f766997960eab69d6863a4

## config服务端：配置密钥(对称加密的密钥)
encrypt.key=didispace

###################################  注册中心  ######################################################
eureka.client.serviceUrl.defaultZone=http://localhost:8881/eureka/
eureka.client.cache-refresh-executor-thread-pool-size=5